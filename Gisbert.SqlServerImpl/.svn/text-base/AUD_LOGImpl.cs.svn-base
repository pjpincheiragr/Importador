
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Web;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
    public class AUD_LOGImpl
    {
        #region AUD_LOG methods

        private int AUD_LOGAdd(AUD_LOG aud_log)
        {
            try
            {
                return (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "AUD_LOGAdd",
                                                        aud_log.Tabla,
                                                        aud_log.IdTabla,
                                                        aud_log.Accion,
                                                        aud_log.IdUsuario,
                                                        aud_log.Fecha);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool AUD_LOGUpdate(AUD_LOG aud_log)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "AUD_LOGUpdate",
                                                        aud_log.IdLog,
                                                        aud_log.Tabla,
                                                        aud_log.IdTabla,
                                                        aud_log.Accion,
                                                        aud_log.IdUsuario,
                                                        aud_log.Fecha);
                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool AUD_LOGDelete(int IdLog)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "AUD_LOGDelete",
                                                        IdLog);
                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public AUD_LOG AUD_LOGGetById(int IdLog)
        {
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "AUD_LOGGetById",
                                                        IdLog).Tables[0];
                AUD_LOG NewEnt = new AUD_LOG();

                if (dt.Rows.Count > 0)
                {
                    DataRow dr = dt.Rows[0];
                    NewEnt = CargarAUD_LOG(dr);
                }
                return NewEnt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<AUD_LOG> AUD_LOGGetAll()
        {
            List<AUD_LOG> lstAUD_LOG = new List<AUD_LOG>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "AUD_LOGGetAll").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        AUD_LOG NewEnt = new AUD_LOG();
                        NewEnt = CargarAUD_LOG(dr);
                        lstAUD_LOG.Add(NewEnt);
                    }
                }
                return lstAUD_LOG;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private AUD_LOG CargarAUD_LOG(DataRow dr)
        {
            try
            {
                AUD_LOG oObjeto = new AUD_LOG();

                oObjeto.IdLog = Int32.Parse(dr["IdLog"].ToString());
                oObjeto.Tabla = dr["Tabla"].ToString();
                oObjeto.IdTabla = Int32.Parse(dr["IdTabla"].ToString());
                oObjeto.Accion = dr["Accion"].ToString();
                oObjeto.IdUsuario = Int32.Parse(dr["IdUsuario"].ToString());
                oObjeto.Fecha = DateTime.Parse(dr["Fecha"].ToString());

                return oObjeto;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void InsertarLog(string Tabla, int idTabla, string Accion)
        {
            AUD_LOG log = new AUD_LOG();
            log.Tabla = Tabla;
            log.IdTabla = idTabla;
            log.Accion = Accion;

            if (HttpContext.Current.Session["idUsuario"] != null) { log.IdUsuario = int.Parse(HttpContext.Current.Session["idUsuario"].ToString()); }
            else { log.IdUsuario = 0; }

            log.Fecha = DateTime.Now;

            AUD_LOGImpl logImpl = new AUD_LOGImpl();
            logImpl.AUD_LOGAdd(log);
        }

        #endregion
    }
}

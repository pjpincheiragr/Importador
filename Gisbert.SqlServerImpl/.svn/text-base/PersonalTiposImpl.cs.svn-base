
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
	public class PersonalTiposImpl	
	{
		#region PersonalTipos methods

		public int PersonalTiposAdd(PersonalTipos personaltipos)
		{
			try
			{
				int id = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "PersonalTiposAdd",
														personaltipos.Descripcion, 
														personaltipos.Baja);

                AUD_LOGImpl.InsertarLog("PersonalTipos", id, "INSERT");
                
                return id;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public bool PersonalTiposUpdate(PersonalTipos personaltipos)
		{
			try
			{
				int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "PersonalTiposUpdate",
														personaltipos.IdPersonalTipo, 
														personaltipos.Descripcion, 
														personaltipos.Baja);
                
                AUD_LOGImpl.InsertarLog("PersonalTipos", personaltipos.IdPersonalTipo,
                                        personaltipos.Baja ? "UpDEL" : "UPDATE");
                
                if (update > 0)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public bool PersonalTiposDelete(int IdPersonalTipo)
		{
			try
			{
				int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "PersonalTiposDelete",
														IdPersonalTipo);
                
                AUD_LOGImpl.InsertarLog("PersonalTipos", IdPersonalTipo, "DELETE");

                if (update > 0)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public PersonalTipos PersonalTiposGetById(int IdPersonalTipo)
		{
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "PersonalTiposGetById",
														IdPersonalTipo).Tables[0];
				PersonalTipos NewEnt = new PersonalTipos();

				if(dt.Rows.Count > 0)
				{
					DataRow dr = dt.Rows[0];
					NewEnt = CargarPersonalTipos(dr);
				}
				return NewEnt;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public List<PersonalTipos> PersonalTiposGetAll()
		{
			List<PersonalTipos> lstPersonalTipos = new List<PersonalTipos>();
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "PersonalTiposGetAll").Tables[0];
				if (dt.Rows.Count > 0)
				{
					for (int i = 0; dt.Rows.Count > i; i++)
					{
						DataRow dr = dt.Rows[i];
						PersonalTipos NewEnt = new PersonalTipos();
						NewEnt = CargarPersonalTipos(dr);
						lstPersonalTipos.Add(NewEnt);
					}
				}
				return lstPersonalTipos;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		private PersonalTipos CargarPersonalTipos(DataRow dr)
		{
			try
			{
				PersonalTipos oObjeto = new PersonalTipos();

				oObjeto.IdPersonalTipo = Int32.Parse(dr["IdPersonalTipo"].ToString());
				oObjeto.Descripcion = dr["Descripcion"].ToString();
				oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());
				
				return oObjeto;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public List<PersonalTipos> PersonalTiposGetAllBaja()
		{
			List<PersonalTipos> lstPersonalTipos = new List<PersonalTipos>();
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "PersonalTiposGetAllBaja").Tables[0];
				if (dt.Rows.Count > 0)
				{
					for (int i = 0; dt.Rows.Count > i; i++)
					{
						PersonalTipos NewEnt = new PersonalTipos();
						NewEnt = CargarPersonalTipos(dt.Rows[i]);
						lstPersonalTipos.Add(NewEnt);
					}
				}
				return lstPersonalTipos;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		#endregion

	}
}

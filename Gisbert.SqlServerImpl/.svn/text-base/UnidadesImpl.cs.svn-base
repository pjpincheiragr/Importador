
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
	public class UnidadesImpl	
	{
		#region Unidades methods

		public int UnidadesAdd(Unidades unidades)
		{
			try
			{
				int id =(int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "UnidadesAdd",
														unidades.Descripcion, 
														unidades.Abreviatura, 
														unidades.Baja);
                
                AUD_LOGImpl.InsertarLog("Unidades", id, "INSERT");
                
                return id;
            }
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public bool UnidadesUpdate(Unidades unidades)
		{
			try
			{
				int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "UnidadesUpdate",
														unidades.IdUnidad, 
														unidades.Descripcion, 
														unidades.Abreviatura, 
														unidades.Baja);
                
                AUD_LOGImpl.InsertarLog("Unidades", unidades.IdUnidad, unidades.Baja ? "UpDEL" : "UPDATE");
                
                if (update > 0)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public bool UnidadesDelete(int IdUnidad)
		{
			try
			{
				int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "UnidadesDelete",
														IdUnidad);

                AUD_LOGImpl.InsertarLog("Unidades", IdUnidad, "DELETE");

                if (update > 0)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public Unidades UnidadesGetById(int IdUnidad)
		{
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "UnidadesGetById",
														IdUnidad).Tables[0];
				Unidades NewEnt = new Unidades();

				if(dt.Rows.Count > 0)
				{
					DataRow dr = dt.Rows[0];
					NewEnt = CargarUnidades(dr);
				}
				return NewEnt;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public List<Unidades> UnidadesGetAll()
		{
			List<Unidades> lstUnidades = new List<Unidades>();
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "UnidadesGetAll").Tables[0];
				if (dt.Rows.Count > 0)
				{
					for (int i = 0; dt.Rows.Count > i; i++)
					{
						DataRow dr = dt.Rows[i];
						Unidades NewEnt = new Unidades();
						NewEnt = CargarUnidades(dr);
						lstUnidades.Add(NewEnt);
					}
				}
				return lstUnidades;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		private Unidades CargarUnidades(DataRow dr)
		{
			try
			{
				Unidades oObjeto = new Unidades();

				oObjeto.IdUnidad = Int32.Parse(dr["IdUnidad"].ToString());
				oObjeto.Descripcion = dr["Descripcion"].ToString();
				oObjeto.Abreviatura = dr["Abreviatura"].ToString();
				oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());
				
				return oObjeto;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public List<Unidades> UnidadesGetAllBaja()
		{
			List<Unidades> lstUnidades = new List<Unidades>();
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "UnidadesGetAllBaja").Tables[0];
				if (dt.Rows.Count > 0)
				{
					for (int i = 0; dt.Rows.Count > i; i++)
					{
						Unidades NewEnt = new Unidades();
						NewEnt = CargarUnidades(dt.Rows[i]);
						lstUnidades.Add(NewEnt);
					}
				}
				return lstUnidades;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		#endregion

	}
}

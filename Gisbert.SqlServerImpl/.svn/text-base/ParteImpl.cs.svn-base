
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
	public class ParteImpl	
	{
        bool byId = false;//variable para determinar si se obtien idOperador en referencia a personal o por indice.
		#region Parte methods

		public int ParteAdd(Partes parte)
		{
			try
			{
                int id = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getTransaction(), "ParteAdd",
														parte.Fecha, 
														parte.Numero, 
														parte.IdPickUp, 
														parte.IdVehiculoCL, 
														parte.oIdCliente.IdCliente, 
														parte.oIdArea.IdArea, 
														parte.oIdYacimiento.IdYacimiento, 
														parte.Pozo, 
														parte.Bateria, 
														parte.IdOperador, 
														parte.IdAyudante, 
														parte.IdChoferCL, 
														parte.Baja, 
														parte.HoraInicio, 
														parte.HoraFin, 
														parte.IdTareas,
														parte.KmEquipoAdic, 
														parte.Automatico, 
														parte.IdEquipo, 
														parte.Inspector, 
														parte.Observaciones, 
														parte.Zona);

                AUD_LOGImpl.InsertarLog("Partes", id, "INSERT");
                
                return id;
            }
			catch(Exception ex)
			{
                throw ex;
			}
		}


        public int ParteAdd(Partes parte,DataTable ParteDetalle, DataTable ParteFluido)
        {
            try
            {
             
             parte.IdParte = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getTransaction(), "ParteAdd",
                                                        parte.Fecha,
                                                        parte.Numero,
                                                        parte.IdPickUp,
                                                        parte.IdVehiculoCL,
                                                        parte.oIdCliente.IdCliente,
                                                        parte.oIdArea.IdArea,
                                                        parte.oIdYacimiento.IdYacimiento,
                                                        parte.Pozo,
                                                        parte.Bateria,
                                                        parte.IdOperador,
                                                        parte.IdAyudante,
                                                        parte.IdChoferCL,
                                                        parte.Baja,
                                                        parte.HoraInicio,
                                                        parte.HoraFin,
                                                        parte.IdTareas,
                                                        parte.KmEquipoAdic,
                                                        parte.Automatico,
                                                        parte.IdEquipo,
                                                        parte.Inspector,
                                                        parte.Observaciones,
                                                        parte.Zona);
   
                ParteDetalleImpl oParteDetalleImpl = new ParteDetalleImpl();
                ParteDetalleFluidosImpl oParteDetalleFluidoImpl = new ParteDetalleFluidosImpl();
                int idparteDetalle;
                for (int i = 0; i < ParteDetalle.Rows.Count; i++)
                {
                    ParteDetalle oParteDetalle = new ParteDetalle();
                    oParteDetalle.IdParte = (parte.IdParte);
                    oParteDetalle.oIdOperacionTipo =new OperacionTipoImpl().OperacionTipoGetById(Convert.ToInt32(ParteDetalle.Rows[i]["IdOperacionTipo"].ToString()));
                    oParteDetalle.PresionInicial = Convert.ToInt16(ParteDetalle.Rows[i]["PresionInicial"].ToString());
                    oParteDetalle.PresionFinal = Convert.ToInt16(ParteDetalle.Rows[i]["PresionFinal"].ToString());
                    oParteDetalle.PresionMaxima = Convert.ToInt16(ParteDetalle.Rows[i]["PresionMaxima"].ToString());
                    oParteDetalle.HoraInicio = Convert.ToDateTime(ParteDetalle.Rows[i]["HoraInicio"]);
                    oParteDetalle.HoraFin = Convert.ToDateTime(ParteDetalle.Rows[i]["HoraFin"]);
                    oParteDetalle.HoraInicioDisp = DateTime.Parse("0:00");
                    oParteDetalle.HoraFinDisp = DateTime.Parse("0:00");
                    oParteDetalle.Baja = false;
                    idparteDetalle = oParteDetalleImpl.ParteDetalleAdd(oParteDetalle);
                    //Cargo los Fluidos
                    for (int j = 0; j < ParteFluido.Rows.Count; j++)
                    {
                        if (int.Parse(ParteFluido.Rows[j]["IdParteDetalle"].ToString()) == int.Parse(ParteDetalle.Rows[i]["IdParteDetalle"].ToString()))
                        {
                            ParteDetalleFluidos oParteDetalleFluido = new ParteDetalleFluidos();
                            oParteDetalleFluido.IdParteDetalle = idparteDetalle;
                            oParteDetalleFluido.M3 = Convert.ToDecimal(ParteFluido.Rows[j]["M3"].ToString());
                            oParteDetalleFluido.Temperatura = Convert.ToDecimal(ParteFluido.Rows[j]["Temperatura"].ToString());
                            if (ParteFluido.Rows[j]["Fluidos"].ToString() == "Agua")
                                oParteDetalleFluido.IdFluido = 1;
                            else
                                oParteDetalleFluido.IdFluido = 2; //Petroleo
                            oParteDetalleFluidoImpl.ParteDetalleFluidosAdd(oParteDetalleFluido);
                        }
                    }
                }

                SqlImplHelper.commitTransaction();

                AUD_LOGImpl.InsertarLog("Partes", parte.IdParte, "INSERT");

                return parte.IdParte;
                

            }
            catch (Exception ex)
            {
                SqlImplHelper.rollbackTransaction();
                throw ex;
            }
        }


		public bool ParteUpdate(Partes parte)
		{
			try
			{
				int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "ParteUpdate",
														parte.IdParte, 
														parte.Fecha, 
														parte.Numero, 
														parte.IdPickUp, 
														parte.IdVehiculoCL, 
														parte.oIdCliente.IdCliente, 
														parte.oIdArea.IdArea, 
														parte.oIdYacimiento.IdYacimiento, 
														parte.Pozo, 
														parte.Bateria,
                                                       (parte.IdOperador), 
													   (parte.IdAyudante), 
													   (parte.IdChoferCL), 
														parte.Baja, 
														parte.HoraInicio, 
														parte.HoraFin, 
														parte.IdTareas, 
														parte.KmEquipoAdic, 
														parte.Automatico, 
														parte.IdEquipo, 
														parte.Inspector, 
														parte.Observaciones, 
														parte.Zona);

                AUD_LOGImpl.InsertarLog("Partes", parte.IdParte, parte.Baja ? "UpDEL" : "UPDATE");
                
                if (update > 0)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

        public bool ParteUpdate(Partes parte, DataTable ParteDetalle,DataTable ParteFluido)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getTransaction(), "ParteUpdate",
                                                        parte.IdParte,
                                                        parte.Fecha,
                                                        parte.Numero,
                                                        parte.IdPickUp,
                                                        parte.IdVehiculoCL,
                                                        parte.oIdCliente.IdCliente,
                                                        parte.oIdArea.IdArea,
                                                        parte.oIdYacimiento.IdYacimiento,
                                                        parte.Pozo,
                                                        parte.Bateria,
                                                        parte.IdOperador,
                                                        parte.IdAyudante,
                                                        parte.IdChoferCL,
                                                        parte.Baja,
                                                        parte.HoraInicio,
                                                        parte.HoraFin,
                                                        parte.IdTareas,
                                                        parte.KmEquipoAdic,
                                                        parte.Automatico,
                                                        parte.IdEquipo,
                                                        parte.Inspector,
                                                        parte.Observaciones,
                                                        parte.Zona);


                ParteDetalleImpl oParteDetalleImpl = new ParteDetalleImpl();
                int idparteDetalle;
                for (int i = 0; i < ParteDetalle.Rows.Count; i++)
                {
                    ParteDetalle oParteDetalle = new ParteDetalle();
                    oParteDetalle.IdParte = (parte.IdParte);
                    oParteDetalle.oIdOperacionTipo = new OperacionTipoImpl().OperacionTipoGetById(Convert.ToInt32(ParteDetalle.Rows[i]["IdOperacionTipo"].ToString()));
                    oParteDetalle.PresionInicial = Convert.ToInt16(ParteDetalle.Rows[i]["PresionInicial"].ToString());
                    oParteDetalle.PresionFinal = Convert.ToInt16(ParteDetalle.Rows[i]["PresionFinal"].ToString());
                    oParteDetalle.PresionMaxima = Convert.ToInt16(ParteDetalle.Rows[i]["PresionMaxima"].ToString());
                    oParteDetalle.HoraInicio = Convert.ToDateTime(ParteDetalle.Rows[i]["HoraInicio"]);
                    oParteDetalle.HoraFin = Convert.ToDateTime(ParteDetalle.Rows[i]["HoraFin"]);
                    oParteDetalle.HoraInicioDisp = DateTime.Parse("0:00");
                    oParteDetalle.HoraFinDisp = DateTime.Parse("0:00");
                    oParteDetalle.Baja = false;
                    if (int.Parse(ParteDetalle.Rows[i]["IdParteDetalle"].ToString()) > 0){
                        oParteDetalle.IdParteDetalle = Convert.ToInt16(ParteDetalle.Rows[i]["IdParteDetalle"].ToString());
                        oParteDetalleImpl.ParteDetalleUpdate(oParteDetalle);
                        idparteDetalle=oParteDetalle.IdParteDetalle;
                    }
                    else
                        idparteDetalle = oParteDetalleImpl.ParteDetalleAdd(oParteDetalle);

                    //Cargo los Fluidos - Los Elimino y los vuelvo a cargar
                    ParteDetalleFluidosImpl oParteDetalleFluidoImpl = new ParteDetalleFluidosImpl();
                    oParteDetalleFluidoImpl.ParteDetalleFluidosDeleteByIdParteDetalle(idparteDetalle);
        
                    for (int j = 0; j < ParteFluido.Rows.Count; j++)
                    {
                        if (int.Parse(ParteFluido.Rows[j]["IdParteDetalle"].ToString()) == int.Parse(ParteDetalle.Rows[i]["IdParteDetalle"].ToString()))
                        {
                            ParteDetalleFluidos oParteDetalleFluido = new ParteDetalleFluidos();
                            oParteDetalleFluido.IdParteDetalle = idparteDetalle;
                            oParteDetalleFluido.M3 = Convert.ToDecimal(ParteFluido.Rows[j]["M3"].ToString());
                            oParteDetalleFluido.Temperatura = Convert.ToDecimal(ParteFluido.Rows[j]["Temperatura"].ToString());
                            if (ParteFluido.Rows[j]["Fluidos"].ToString() == "Agua")
                                oParteDetalleFluido.IdFluido = 1;
                            else
                                oParteDetalleFluido.IdFluido = 2; //Petroleo

                            oParteDetalleFluidoImpl.ParteDetalleFluidosAdd(oParteDetalleFluido);
                        }
                    }
                }

                AUD_LOGImpl.InsertarLog("Partes", parte.IdParte, parte.Baja ? "UpDEL" : "UPDATE");

                if (update > 0)
                {
                    SqlImplHelper.commitTransaction();
                    return true;
                }
                else
                {
                    SqlImplHelper.rollbackTransaction();
                    return false;
                }
            }
            catch (Exception ex)
            {
                SqlImplHelper.rollbackTransaction();
                throw ex;
            }
      }

        public bool ParteExisteNroParte(int idParte, int nroParte)
        {
            bool band = false;
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ParteExisteNroParte",
                                                        idParte, nroParte).Tables[0];  
                if (dt.Rows.Count > 0)
                {
                    band=true;
                }
                return band;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

		public bool ParteDelete(int IdParte)
		{
			try
			{
				int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "ParteDelete",
														IdParte);
               
                AUD_LOGImpl.InsertarLog("Partes", IdParte, "DELETE");

                if (update > 0)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public Partes ParteGetById(int IdParte)
		{
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ParteGetById",
														IdParte).Tables[0];
				Partes NewEnt = new Partes();
                byId = true;
				if(dt.Rows.Count > 0)
				{
					DataRow dr = dt.Rows[0];
					NewEnt = CargarParte(dr);
				}
				return NewEnt;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

        public int ParteGetAllNumeroParte(int numero)
        {
           return (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "ParteGetAllNumeroParte",numero);
        }

		public List<Partes> ParteGetAll()
		{
			List<Partes> lstParte = new List<Partes>();
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ParteGetAll").Tables[0];
				if (dt.Rows.Count > 0)
				{
					for (int i = 0; dt.Rows.Count > i; i++)
					{
						DataRow dr = dt.Rows[i];
						Partes NewEnt = new Partes();
						NewEnt = CargarParte(dr);
						lstParte.Add(NewEnt);
					}
				}
				return lstParte;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

        //metodo agregado
        public List<Partes> ParteGetByFilter(string idequipo,string numero, string idcliente,string idarea,string fechadesde, string fechahasta )
        {
            List<Partes> lstParte = new List<Partes>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ParteGetByFilter",
                                                        SqlImplHelper.getNullIfCero(idequipo),
                                                        SqlImplHelper.getNullIfEmpty(numero), 
                                                        SqlImplHelper.getNullIfCero(idcliente),
                                                        SqlImplHelper.getNullIfCero(idarea),
                                                       SqlImplHelper.getNullIfEmpty(fechadesde),
                                                       SqlImplHelper.getNullIfEmpty(fechahasta)).Tables[0];
                if (dt.Rows.Count >= 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Partes NewEnt = new Partes();
                        NewEnt = CargarParte(dr);
                        lstParte.Add(NewEnt);
                    }
                }
                return lstParte;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Partes> ParteGetByIdJoin(int idParte)
        {
            List<Partes> lstParte = new List<Partes>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ParteGetByIdJoin",
                                                                                             idParte).Tables[0];
                if (dt.Rows.Count > 0)
                {
                        DataRow dr = dt.Rows[0];
                        Partes NewEnt = new Partes();
                        NewEnt = CargarParte(dr);
                        lstParte.Add(NewEnt);
                }
                return lstParte;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


		private Partes CargarParte(DataRow dr)
		{
			try
			{
				Partes oObjeto = new Partes();
                ClientesImpl oClientesImpl = new ClientesImpl();
                AreasImpl oAreaImpl = new AreasImpl();
                YacimientosImpl oYacimientosImpl = new YacimientosImpl();
                TareasImpl oTareasImpl = new TareasImpl();
                EquiposImpl oEquiposImpl = new EquiposImpl();
                PersonalImpl oPersonalImpl = new PersonalImpl();


				oObjeto.IdParte = Int32.Parse(dr["IdParte"].ToString());
				oObjeto.Fecha = DateTime.Parse(dr["Fecha"].ToString());
				oObjeto.Numero = Int32.Parse(dr["Numero"].ToString());
                oObjeto.IdEquipo = Int32.Parse(dr["IdEquipo"].ToString());
				oObjeto.IdPickUp = (Int32.Parse(dr["IdPickUp"].ToString()));
				oObjeto.IdVehiculoCL = (Int32.Parse(dr["IdVehiculoCL"].ToString()));
				oObjeto.oIdCliente = oClientesImpl.ClientesGetById(Int32.Parse(dr["IdCliente"].ToString()));
				oObjeto.oIdArea = oAreaImpl.AreasGetById(Int32.Parse(dr["IdArea"].ToString()));
				oObjeto.oIdYacimiento = oYacimientosImpl.YacimientosGetById(Int32.Parse(dr["IdYacimiento"].ToString()));
				oObjeto.Pozo = dr["Pozo"].ToString();
				oObjeto.Bateria = dr["Bateria"].ToString();
                if(byId == false)
                   oObjeto.IdOperador = oPersonalImpl.PersonalGetById(Convert.ToInt16(dr["IdOperador"].ToString()));
                else
                    oObjeto.IdOperador = (Convert.ToInt16(dr["IdOperador"].ToString()));
				oObjeto.IdAyudante = (dr["IdAyudante"].ToString());
				oObjeto.IdChoferCL = (dr["IdChoferCL"].ToString());
				oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());
				oObjeto.HoraInicio = DateTime.Parse(dr["HoraInicio"].ToString());
				oObjeto.HoraFin = DateTime.Parse(dr["HoraFin"].ToString());
				oObjeto.IdTareas = (dr["IdTareas"].ToString());
				oObjeto.KmEquipoAdic = Int32.Parse(dr["KmEquipoAdic"].ToString());
				oObjeto.Automatico = Boolean.Parse(dr["Automatico"].ToString());
				oObjeto.Inspector = dr["Inspector"].ToString();
				oObjeto.Observaciones = dr["Observaciones"].ToString();
				oObjeto.Zona = dr["Zona"].ToString();
				
				return oObjeto;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public List<Partes> ParteGetAllBaja()
		{
			List<Partes> lstParte = new List<Partes>();
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ParteGetAllBaja").Tables[0];
				if (dt.Rows.Count > 0)
				{
					for (int i = 0; dt.Rows.Count > i; i++)
					{
						Partes NewEnt = new Partes();
						NewEnt = CargarParte(dt.Rows[i]);
						lstParte.Add(NewEnt);
					}
				}
				return lstParte;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}
        public DataTable ParteGetByFilterCert(int idCliente, int idArea, DateTime fechaDesde, DateTime fechaHasta)
        {
            try
            {
                DataTable DTPartes;
                DataSet DSPartes = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ParteGetByFilterCert", idCliente, idArea, fechaDesde, fechaHasta);
                DTPartes = DSPartes.Tables[0];
                DSPartes.Tables.RemoveAt(0);
                return DTPartes;
            }
            catch (Exception)
            {
                return null;
            }
        }

		#endregion

	}
}

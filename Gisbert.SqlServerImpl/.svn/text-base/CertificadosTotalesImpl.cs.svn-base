
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
    public class CertificadosTotalesImpl
    {
        #region CertificadosTotales methods

        public int CertificadosTotalesAdd(CertificadosTotales certificadostotales)
        {
            try
            {
                int id = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "CertificadosTotalesAdd",
                                                       certificadostotales.IdCertificado,
                                                       certificadostotales.IdAnexoTarifa,
                                                       certificadostotales.CantOriginal,
                                                       certificadostotales.Cantidad,
                                                       certificadostotales.PrecioUnit,
                                                       certificadostotales.PrecioTotal,
                                                       certificadostotales.Baja);

                AUD_LOGImpl.InsertarLog("CertificadosTotales ", id, "INSERT");

                return id;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CertificadosTotalesUpdate(CertificadosTotales certificadostotales)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "CertificadosTotalesUpdate",
                                                        certificadostotales.IdCertificadoTotal,
                                                        certificadostotales.IdCertificado,
                                                        certificadostotales.IdAnexoTarifa,
                                                        certificadostotales.CantOriginal,
                                                        certificadostotales.Cantidad,
                                                        certificadostotales.PrecioUnit,
                                                        certificadostotales.PrecioTotal,
                                                        certificadostotales.Baja);

                AUD_LOGImpl.InsertarLog("CertificadosTotales ", certificadostotales.IdCertificadoTotal,
                                        certificadostotales.Baja ? "UpDEL" : "UPDATE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CertificadosTotalesDelete(int IdCertificadoTotal)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "CertificadosTotalesDelete",
                                                        IdCertificadoTotal);

                AUD_LOGImpl.InsertarLog("CertificadosTotales ", IdCertificadoTotal, "DELETE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CertificadosTotales CertificadosTotalesGetById(int IdCertificadoTotal)
        {
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "CertificadosTotalesGetById",
                                                        IdCertificadoTotal).Tables[0];
                CertificadosTotales NewEnt = new CertificadosTotales();

                if (dt.Rows.Count > 0)
                {
                    DataRow dr = dt.Rows[0];
                    NewEnt = CargarCertificadosTotales(dr);
                }
                return NewEnt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<CertificadosTotales> CertificadosTotalesGetAll()
        {
            List<CertificadosTotales> lstCertificadosTotales = new List<CertificadosTotales>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "CertificadosTotalesGetAll").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        CertificadosTotales NewEnt = new CertificadosTotales();
                        NewEnt = CargarCertificadosTotales(dr);
                        lstCertificadosTotales.Add(NewEnt);
                    }
                }
                return lstCertificadosTotales;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private CertificadosTotales CargarCertificadosTotales(DataRow dr)
        {
            try
            {
                CertificadosTotales oObjeto = new CertificadosTotales();

                oObjeto.IdCertificadoTotal = Int32.Parse(dr["IdCertificadoTotal"].ToString());
                oObjeto.IdCertificado = Int32.Parse(dr["IdCertificado"].ToString());
                oObjeto.IdAnexoTarifa = Int32.Parse(dr["IdAnexoTarifa"].ToString());
                oObjeto.CantOriginal = Decimal.Parse(dr["CantOriginal"].ToString());
                oObjeto.Cantidad = Decimal.Parse(dr["Cantidad"].ToString());
                oObjeto.PrecioUnit = Decimal.Parse(dr["PrecioUnit"].ToString());
                oObjeto.PrecioTotal = Decimal.Parse(dr["PrecioTotal"].ToString());
                oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());

                return oObjeto;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<CertificadosTotales> CertificadosTotalesGetAllBaja()
        {
            List<CertificadosTotales> lstCertificadosTotales = new List<CertificadosTotales>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "CertificadosTotalesGetAllBaja").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        CertificadosTotales NewEnt = new CertificadosTotales();
                        NewEnt = CargarCertificadosTotales(dt.Rows[i]);
                        lstCertificadosTotales.Add(NewEnt);
                    }
                }
                return lstCertificadosTotales;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

    }
}

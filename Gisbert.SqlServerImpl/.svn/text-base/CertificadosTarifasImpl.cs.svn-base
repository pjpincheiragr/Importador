
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
    public class CertificadosTarifasImpl
    {
        #region CertificadosTarifas methods

        public int CertificadosTarifasAdd(CertificadosTarifas certificadostarifas)
        {
            try
            {
                int id = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "CertificadosTarifasAdd",
                                                       certificadostarifas.IdCertificado,
                                                       certificadostarifas.IdParte,
                                                       certificadostarifas.IdAnexoTarifa,
                                                       certificadostarifas.Horas,
                                                       certificadostarifas.Baja);

                AUD_LOGImpl.InsertarLog("CertificadosTarifas", id, "INSERT");

                return id;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CertificadosTarifasUpdate(CertificadosTarifas certificadostarifas)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "CertificadosTarifasUpdate",
                                                        certificadostarifas.IdCertificadoTarifa,
                                                        certificadostarifas.IdCertificado,
                                                        certificadostarifas.IdParte,
                                                        certificadostarifas.IdAnexoTarifa,
                                                        certificadostarifas.Horas,
                                                        certificadostarifas.Baja);

                AUD_LOGImpl.InsertarLog("CertificadosTarifas", certificadostarifas.IdCertificadoTarifa,
                                        certificadostarifas.Baja ? "UpDEL" : "UPDATE");


                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CertificadosTarifasDelete(int IdCertificadoTarifa)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "CertificadosTarifasDelete",
                                                        IdCertificadoTarifa);

                AUD_LOGImpl.InsertarLog("CertificadosTarifas", IdCertificadoTarifa, "DELETE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CertificadosTarifas CertificadosTarifasGetById(int IdCertificadoTarifa)
        {
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "CertificadosTarifasGetById",
                                                        IdCertificadoTarifa).Tables[0];
                CertificadosTarifas NewEnt = new CertificadosTarifas();

                if (dt.Rows.Count > 0)
                {
                    DataRow dr = dt.Rows[0];
                    NewEnt = CargarCertificadosTarifas(dr);
                }
                return NewEnt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<CertificadosTarifas> CertificadosTarifasGetAll()
        {
            List<CertificadosTarifas> lstCertificadosTarifas = new List<CertificadosTarifas>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "CertificadosTarifasGetAll").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        CertificadosTarifas NewEnt = new CertificadosTarifas();
                        NewEnt = CargarCertificadosTarifas(dr);
                        lstCertificadosTarifas.Add(NewEnt);
                    }
                }
                return lstCertificadosTarifas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private CertificadosTarifas CargarCertificadosTarifas(DataRow dr)
        {
            try
            {
                CertificadosTarifas oObjeto = new CertificadosTarifas();

                oObjeto.IdCertificadoTarifa = Int32.Parse(dr["IdCertificadoTarifa"].ToString());
                oObjeto.IdCertificado = Int32.Parse(dr["IdCertificado"].ToString());
                oObjeto.IdParte = Int32.Parse(dr["IdParte"].ToString());
                oObjeto.IdAnexoTarifa = Int32.Parse(dr["IdAnexoTarifa"].ToString());
                oObjeto.Horas = DateTime.Parse(dr["Horas"].ToString());
                oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());

                return oObjeto;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<CertificadosTarifas> CertificadosTarifasGetAllBaja()
        {
            List<CertificadosTarifas> lstCertificadosTarifas = new List<CertificadosTarifas>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "CertificadosTarifasGetAllBaja").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        CertificadosTarifas NewEnt = new CertificadosTarifas();
                        NewEnt = CargarCertificadosTarifas(dt.Rows[i]);
                        lstCertificadosTarifas.Add(NewEnt);
                    }
                }
                return lstCertificadosTarifas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

    }
}

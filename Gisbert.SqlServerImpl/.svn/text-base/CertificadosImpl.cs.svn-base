
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
    public class CertificadosImpl
    {
        #region Certificados methods

        public int CertificadosAdd(Certificados certificados)
        {
            try
            {
                int idCertificados = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "CertificadosAdd",
                                                        certificados.IdArea,
                                                        certificados.Numero,
                                                        certificados.Fecha,
                                                        certificados.IdContratoAnexo,
                                                        certificados.IdUsuario,
                                                        certificados.FechaAlta,
                                                        certificados.BAja);

                AUD_LOGImpl.InsertarLog("Certificados", idCertificados, "INSERT");

                return idCertificados;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CertificadosUpdate(Certificados certificados)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "CertificadosUpdate",
                                                        certificados.IdCertificado,
                                                        certificados.IdArea,
                                                        certificados.Numero,
                                                        certificados.Fecha,
                                                        certificados.IdContratoAnexo,
                                                        certificados.IdUsuario,
                                                        certificados.FechaAlta,
                                                        certificados.BAja);
                
                AUD_LOGImpl.InsertarLog("Certificados", certificados.IdCertificado,"UPDATE");
                
                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CertificadosDelete(int IdCertificado)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "CertificadosDelete",
                                                        IdCertificado);
                
                AUD_LOGImpl.InsertarLog("Certificados", IdCertificado, "DELETE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Certificados CertificadosGetById(int IdCertificado)
        {
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "CertificadosGetById",
                                                        IdCertificado).Tables[0];
                Certificados NewEnt = new Certificados();

                if (dt.Rows.Count > 0)
                {
                    DataRow dr = dt.Rows[0];
                    NewEnt = CargarCertificados(dr);
                }
                return NewEnt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Certificados> CertificadosGetAll()
        {
            List<Certificados> lstCertificados = new List<Certificados>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "CertificadosGetAll").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Certificados NewEnt = new Certificados();
                        NewEnt = CargarCertificados(dr);
                        lstCertificados.Add(NewEnt);
                    }
                }
                return lstCertificados;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private Certificados CargarCertificados(DataRow dr)
        {
            try
            {
                Certificados oObjeto = new Certificados();

                oObjeto.IdCertificado = Int32.Parse(dr["IdCertificado"].ToString());
                oObjeto.IdArea = Int32.Parse(dr["IdArea"].ToString());
                oObjeto.Numero = dr["Numero"].ToString();
                oObjeto.Fecha = DateTime.Parse(dr["Fecha"].ToString());
                oObjeto.IdContratoAnexo = Int32.Parse(dr["IdContratoAnexo"].ToString());
                oObjeto.IdUsuario = Int32.Parse(dr["IdUsuario"].ToString());
                oObjeto.FechaAlta = DateTime.Parse(dr["FechaAlta"].ToString());
                oObjeto.BAja = Boolean.Parse(dr["BAja"].ToString());

                return oObjeto;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Certificados> CertificadosGetAllBaja()
        {
            List<Certificados> lstCertificados = new List<Certificados>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "CertificadosGetAllBaja").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        Certificados NewEnt = new Certificados();
                        NewEnt = CargarCertificados(dt.Rows[i]);
                        lstCertificados.Add(NewEnt);
                    }
                }
                return lstCertificados;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

    }
}

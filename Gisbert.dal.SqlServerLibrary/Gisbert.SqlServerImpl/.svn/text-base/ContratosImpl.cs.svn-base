
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
    public class ContratosImpl
    {
        #region Contratos methods

        public int ContratosAdd(Contratos contratos)
        {
            try
            {
                int id = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "ContratosAdd",
                                                       contratos.NroContrato,
                                                       contratos.FechaInicio,
                                                       contratos.FechaFin,
                                                       contratos.IdCliente,
                                                       contratos.IdArea,
                                                       contratos.Baja);

                AUD_LOGImpl.InsertarLog("Contratos", id, "INSERT");

                return id;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public int ContratosAddCheckNro(Contratos contratos)
        {
            try
            {
                int id = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "ContratosAddCheckNro",
                                                       contratos.NroContrato,
                                                       contratos.FechaInicio,
                                                       contratos.FechaFin,
                                                       contratos.IdCliente,
                                                       contratos.IdArea,
                                                       contratos.Baja);

                AUD_LOGImpl.InsertarLog("Contratos", id, "INSERT");

                return id;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool ContratosUpdate(Contratos contratos)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "ContratosUpdate",
                                                        contratos.IdContrato,
                                                        contratos.NroContrato,
                                                        contratos.FechaInicio,
                                                        contratos.FechaFin,
                                                        contratos.IdCliente,
                                                        contratos.IdArea,
                                                        contratos.Baja);

                AUD_LOGImpl.InsertarLog("Contratos", contratos.IdContrato, contratos.Baja ? "UpDEL" : "UPDATE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool ContratosDelete(int IdContrato)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "ContratosDelete",
                                                        IdContrato);

                AUD_LOGImpl.InsertarLog("Contratos", IdContrato, "DELETE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Contratos ContratosGetById(int IdContrato)
        {
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ContratosGetById",
                                                        IdContrato).Tables[0];
                Contratos NewEnt = new Contratos();

                if (dt.Rows.Count > 0)
                {
                    DataRow dr = dt.Rows[0];
                    NewEnt = CargarContratos(dr);
                }
                return NewEnt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Contratos> ContratosGetAll()
        {
            List<Contratos> lstContratos = new List<Contratos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ContratosGetAll").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Contratos NewEnt = new Contratos();
                        NewEnt = CargarContratos(dr);
                        lstContratos.Add(NewEnt);
                    }
                }
                return lstContratos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private Contratos CargarContratos(DataRow dr)
        {
            try
            {
                Contratos oObjeto = new Contratos();

                oObjeto.IdContrato = Int32.Parse(dr["IdContrato"].ToString());
                oObjeto.NroContrato = dr["NroContrato"].ToString();
                oObjeto.FechaInicio = DateTime.Parse(dr["FechaInicio"].ToString());
                oObjeto.FechaFin = DateTime.Parse(dr["FechaFin"].ToString());
                oObjeto.IdCliente = Int32.Parse(dr["IdCliente"].ToString());
                oObjeto.IdArea = Int32.Parse(dr["IdArea"].ToString());
                oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());

                return oObjeto;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Contratos> ContratosGetAllBaja()
        {
            List<Contratos> lstContratos = new List<Contratos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ContratosGetAllBaja").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        Contratos NewEnt = new Contratos();
                        NewEnt = CargarContratos(dt.Rows[i]);
                        lstContratos.Add(NewEnt);
                    }
                }
                return lstContratos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataTable ContratosGetByFilter(string nroContrato, int idCliente, int idArea)
        {
            try
            {
                DataTable DTContratos;
                DataSet DSContratos = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ContratosGetByFilter", nroContrato, idCliente, idArea);
                DTContratos = DSContratos.Tables[0];
                DSContratos.Tables.RemoveAt(0);
                return DTContratos;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public DataTable ContratosGetByPar(int idCliente, int idArea, DateTime fechaDesde, DateTime fechaHasta)
        {
            try
            {
                DataTable DTContratos;
                DataSet DSContratos = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ContratosGetByPar", idCliente, idArea, fechaDesde, fechaHasta);
                DTContratos = DSContratos.Tables[0];
                DSContratos.Tables.RemoveAt(0);
                return DTContratos;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public bool ContratosExisteNro(int idContrato, int nroContrato)
        {
            bool band = false;
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ContratosExisteNro",
                                                        idContrato, nroContrato).Tables[0];
                if (dt.Rows.Count > 0)
                {
                    band = true;
                }
                return band;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        #endregion

    }
}

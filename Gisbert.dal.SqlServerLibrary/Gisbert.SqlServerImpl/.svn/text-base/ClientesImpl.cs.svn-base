
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
    public class ClientesImpl
    {
        #region Clientes methods

        public int ClientesAdd(Clientes clientes)
        {
            try
            {
                int id = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "ClientesAdd",
                                                       clientes.Baja,
                                                       clientes.RazonSocial,
                                                       clientes.Direccion,
                                                       clientes.Telefono,
                                                       clientes.CUIT,
                                                       clientes.Contacto,
                                                       clientes.Email);
                AUD_LOGImpl.InsertarLog("Clientes", id, "INSERT");

                return id;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool ClientesUpdate(Clientes clientes)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "ClientesUpdate",
                                                        clientes.IdCliente,
                                                        clientes.Baja,
                                                        clientes.RazonSocial,
                                                        clientes.Direccion,
                                                        clientes.Telefono,
                                                        clientes.CUIT,
                                                        clientes.Contacto,
                                                        clientes.Email);
                AUD_LOGImpl.InsertarLog("Clientes", clientes.IdCliente, clientes.Baja ? "UpDEL" : "UPDATE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool ClientesDelete(int IdCliente)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "ClientesDelete",
                                                        IdCliente);

                AUD_LOGImpl.InsertarLog("Clientes", IdCliente, "DELETE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Clientes ClientesGetById(int IdCliente)
        {
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ClientesGetById",
                                                        IdCliente).Tables[0];
                Clientes NewEnt = new Clientes();

                if (dt.Rows.Count > 0)
                {
                    DataRow dr = dt.Rows[0];
                    NewEnt = CargarClientes(dr);
                }
                return NewEnt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Clientes> ClientesGetAll()
        {
            List<Clientes> lstClientes = new List<Clientes>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ClientesGetAll").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Clientes NewEnt = new Clientes();
                        NewEnt = CargarClientes(dr);
                        lstClientes.Add(NewEnt);
                    }
                }
                return lstClientes;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private Clientes CargarClientes(DataRow dr)
        {
            try
            {
                Clientes oObjeto = new Clientes();

                oObjeto.IdCliente = Int32.Parse(dr["IdCliente"].ToString());
                oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());
                oObjeto.RazonSocial = dr["RazonSocial"].ToString();
                oObjeto.Direccion = dr["Direccion"].ToString();
                oObjeto.Telefono = dr["Telefono"].ToString();
                oObjeto.CUIT = dr["CUIT"].ToString();
                oObjeto.Contacto = dr["Contacto"].ToString();
                oObjeto.Email = dr["Email"].ToString();

                return oObjeto;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Clientes> ClientesGetAllBaja()
        {
            List<Clientes> lstClientes = new List<Clientes>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "ClientesGetAllBaja").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        Clientes NewEnt = new Clientes();
                        NewEnt = CargarClientes(dt.Rows[i]);
                        lstClientes.Add(NewEnt);
                    }
                }
                return lstClientes;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

    }
}

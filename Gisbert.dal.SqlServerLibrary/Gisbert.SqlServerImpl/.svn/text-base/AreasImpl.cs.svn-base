
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
    public class AreasImpl
    {
        #region Areas methods

        public int AreasAdd(Areas areas)
        {
            try
            {

                int idAreas = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "AreasAdd",
                                                        areas.Descripcion,
                                                        areas.IdCliente,
                                                        areas.Baja);

                AUD_LOGImpl.InsertarLog("Areas", idAreas, "INSERT");
                return idAreas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool AreasUpdate(Areas areas)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "AreasUpdate",
                                                        areas.IdArea,
                                                        areas.Descripcion,
                                                        areas.IdCliente,
                                                        areas.Baja);

                AUD_LOGImpl.InsertarLog("Areas", areas.IdArea, areas.Baja ? "UpDEL" : "UPDATE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool AreasDelete(int IdArea)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "AreasDelete",
                                                        IdArea);
                AUD_LOGImpl.InsertarLog("Areas", IdArea, "DELETE");
                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Areas AreasGetById(int IdArea)
        {
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "AreasGetById",
                                                        IdArea).Tables[0];
                Areas NewEnt = new Areas();

                if (dt.Rows.Count > 0)
                {
                    DataRow dr = dt.Rows[0];
                    NewEnt = CargarAreas(dr);
                }
                return NewEnt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Areas> AreasGetAll()
        {
            List<Areas> lstAreas = new List<Areas>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "AreasGetAll").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Areas NewEnt = new Areas();
                        NewEnt = CargarAreas(dr);
                        lstAreas.Add(NewEnt);
                    }
                }
                return lstAreas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private Areas CargarAreas(DataRow dr)
        {
            try
            {
                Areas oObjeto = new Areas();

                oObjeto.IdArea = Int32.Parse(dr["IdArea"].ToString());
                oObjeto.Descripcion = dr["Descripcion"].ToString();
                oObjeto.IdCliente = Int32.Parse(dr["IdCliente"].ToString());
                oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());

                return oObjeto;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Areas> AreasGetAllBaja()
        {
            List<Areas> lstAreas = new List<Areas>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "AreasGetAllBaja").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        Areas NewEnt = new Areas();
                        NewEnt = CargarAreas(dt.Rows[i]);
                        lstAreas.Add(NewEnt);
                    }
                }
                return lstAreas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public List<Areas> AreasGetByIdCliente(int idCliente)
        {
            List<Areas> lstAreas = new List<Areas>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "AreasGetByIdCliente", idCliente).Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        Areas NewEnt = new Areas();
                        NewEnt = CargarAreas(dt.Rows[i]);
                        lstAreas.Add(NewEnt);
                    }
                }
                return lstAreas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public DataTable AreasGetAllCustomize()
        {
            try
            {
                DataTable DTAreas;
                DataSet DSAreas = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "AreasGetAllCustomize");
                DTAreas = DSAreas.Tables[0];
                DSAreas.Tables.RemoveAt(0);
                return DTAreas;
            }
            catch (Exception)
            {
                return null;
            }
        }

        #endregion

    }
}

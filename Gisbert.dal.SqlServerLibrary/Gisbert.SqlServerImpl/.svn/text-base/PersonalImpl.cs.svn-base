
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
	public class PersonalImpl	
	{
		#region Personal methods

		public int PersonalAdd(Personal personal)
		{
			try
			{
                 int id = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "PersonalAdd",
														personal.Nombre, 
														personal.Apellido, 
														personal.Email, 
														personal.Baja, 
														personal.oPersonalTipo.IdPersonalTipo, 
														personal.DNI, 
														personal.Telefono,
                                                        personal.Interno);

                 AUD_LOGImpl.InsertarLog("Personal", id, "INSERT");
                 
                 return id;
            }
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public bool PersonalUpdate(Personal personal)
		{
			try
			{
				int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "PersonalUpdate",
														personal.IdPersonal, 
														personal.Nombre, 
														personal.Apellido, 
														personal.Email, 
														personal.Baja, 
														personal.oPersonalTipo.IdPersonalTipo, 
														personal.DNI, 
														personal.Telefono,
                                                        personal.Interno);

                AUD_LOGImpl.InsertarLog("Personal", personal.IdPersonal, personal.Baja ? "UpDEL" : "UPDATE");
                                
                if (update > 0)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public bool PersonalDelete(int IdPersonal)
		{
			try
			{
				int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "PersonalDelete",
														IdPersonal);

                AUD_LOGImpl.InsertarLog("Personal", IdPersonal, "DELETE");

                if (update > 0)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public Personal PersonalGetById(int IdPersonal)
		{
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "PersonalGetById",
														IdPersonal).Tables[0];
				Personal NewEnt = new Personal();

				if(dt.Rows.Count > 0)
				{
					DataRow dr = dt.Rows[0];
					NewEnt = CargarPersonal(dr);
				}
				return NewEnt;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public List<Personal> PersonalGetAll()
		{
			List<Personal> lstPersonal = new List<Personal>();
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "PersonalGetAll").Tables[0];
				if (dt.Rows.Count > 0)
				{
					for (int i = 0; dt.Rows.Count > i; i++)
					{
						DataRow dr = dt.Rows[i];
						Personal NewEnt = new Personal();
						NewEnt = CargarPersonal(dr);
						lstPersonal.Add(NewEnt);
					}
				}
				return lstPersonal;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		private Personal CargarPersonal(DataRow dr)
		{
			try
			{
				Personal oObjeto = new Personal();
                PersonalTiposImpl oPersonalTiposImpl = new PersonalTiposImpl();
				oObjeto.IdPersonal = int.Parse(dr["IdPersonal"].ToString());
				oObjeto.Nombre = dr["Nombre"].ToString();
				oObjeto.Apellido = dr["Apellido"].ToString();
				oObjeto.Email = dr["Email"].ToString();
				oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());
				oObjeto.oPersonalTipo = oPersonalTiposImpl.PersonalTiposGetById(int.Parse(dr["IdPersonalTipo"].ToString()));
				oObjeto.DNI = dr["DNI"].ToString();
				oObjeto.Telefono = dr["Telefono"].ToString();
                oObjeto.Interno = Boolean.Parse(dr["Interno"].ToString());

				return oObjeto;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

		public List<Personal> PersonalGetAllBaja()
		{
			List<Personal> lstPersonal = new List<Personal>();
			try
			{
				DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "PersonalGetAllBaja").Tables[0];
				if (dt.Rows.Count > 0)
				{
					for (int i = 0; dt.Rows.Count > i; i++)
					{
						Personal NewEnt = new Personal();
						NewEnt = CargarPersonal(dt.Rows[i]);
						lstPersonal.Add(NewEnt);
					}
				}
				return lstPersonal;
			}
			catch(Exception ex)
			{
				throw ex;
			}
		}

        public List<Personal> PersonalGetByInterno()
        {
            List<Personal> lstPersonal = new List<Personal>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "PersonalGetByInterno").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        Personal NewEnt = new Personal();
                        NewEnt = CargarPersonal(dt.Rows[i]);
                        lstPersonal.Add(NewEnt);
                    }
                }
                return lstPersonal;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Personal> PersonalGetByExterno()
        {
            List<Personal> lstPersonal = new List<Personal>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "PersonalGetByExterno").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        Personal NewEnt = new Personal();
                        NewEnt = CargarPersonal(dt.Rows[i]);
                        lstPersonal.Add(NewEnt);
                    }
                }
                return lstPersonal;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


		#endregion

	}
}

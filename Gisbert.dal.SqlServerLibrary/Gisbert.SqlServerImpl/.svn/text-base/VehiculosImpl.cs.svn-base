
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
    public class VehiculosImpl
    {
        #region Vehiculos methods

        public int VehiculosAdd(Vehiculos vehiculos)
        {
            try
            {
                int id = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "VehiculosAdd",
                                                        vehiculos.oIdVehiculoTipo.IdVehiculoTipo,
                                                        vehiculos.Descripcion,
                                                        vehiculos.Dominio,
                                                        vehiculos.Baja,
                                                        vehiculos.Interno);

                AUD_LOGImpl.InsertarLog("Vehiculos", id, "INSERT");
                
                return id;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool VehiculosUpdate(Vehiculos vehiculos)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "VehiculosUpdate",
                                                        vehiculos.IdVehiculo,
                                                        vehiculos.oIdVehiculoTipo.IdVehiculoTipo,
                                                        vehiculos.Descripcion,
                                                        vehiculos.Dominio,
                                                        vehiculos.Baja,
                                                        vehiculos.Interno);
                
                AUD_LOGImpl.InsertarLog("Vehiculos", vehiculos.IdVehiculo, vehiculos.Baja ? "UpDEL" : "UPDATE");
                
                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool VehiculosDelete(int IdVehiculo)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "VehiculosDelete",
                                                        IdVehiculo);
                
                AUD_LOGImpl.InsertarLog("Vehiculos", IdVehiculo, "DELETE");
                
                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Vehiculos VehiculosGetById(int IdVehiculo)
        {
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "VehiculosGetById",
                                                        IdVehiculo).Tables[0];
                Vehiculos NewEnt = new Vehiculos();

                if (dt.Rows.Count > 0)
                {
                    DataRow dr = dt.Rows[0];
                    NewEnt = CargarVehiculos(dr);
                }
                return NewEnt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Vehiculos> VehiculosGetAll()
        {
            List<Vehiculos> lstVehiculos = new List<Vehiculos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "VehiculosGetAll").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Vehiculos NewEnt = new Vehiculos();
                        NewEnt = CargarVehiculos(dr);
                        lstVehiculos.Add(NewEnt);
                    }
                }
                return lstVehiculos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private Vehiculos CargarVehiculos(DataRow dr)
        {
            try
            {
                Vehiculos oObjeto = new Vehiculos();
                VehiculosTiposImpl oVehiculosTiposImpl = new VehiculosTiposImpl();
                oObjeto.IdVehiculo = int.Parse(dr["IdVehiculo"].ToString());
                oObjeto.oIdVehiculoTipo = oVehiculosTiposImpl.VehiculosTiposGetById(int.Parse(dr["IdVehiculoTipo"].ToString()));
                oObjeto.Descripcion = dr["Descripcion"].ToString();
                oObjeto.Dominio = dr["Dominio"].ToString();
                oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());
                oObjeto.Interno = Boolean.Parse(dr["Interno"].ToString());

                return oObjeto;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Vehiculos> VehiculosGetAllBaja()
        {
            List<Vehiculos> lstVehiculos = new List<Vehiculos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "VehiculosGetAllBaja").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        Vehiculos NewEnt = new Vehiculos();
                        NewEnt = CargarVehiculos(dt.Rows[i]);
                        lstVehiculos.Add(NewEnt);
                    }
                }
                return lstVehiculos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Vehiculos> VehiculosGetByInterno()
        {
            List<Vehiculos> lstVehiculos = new List<Vehiculos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "VehiculosGetByInterno").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Vehiculos NewEnt = new Vehiculos();
                        NewEnt = CargarVehiculos(dr);
                        lstVehiculos.Add(NewEnt);
                    }
                }
                return lstVehiculos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public List<Vehiculos> VehiculosGetByExterno()
        {
            List<Vehiculos> lstVehiculos = new List<Vehiculos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "VehiculosGetByExterno").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Vehiculos NewEnt = new Vehiculos();
                        NewEnt = CargarVehiculos(dr);
                        lstVehiculos.Add(NewEnt);
                    }
                }
                return lstVehiculos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }



        public List<Vehiculos> VehiculosGetByTipo(int Tipo)
        {
            List<Vehiculos> lstVehiculos = new List<Vehiculos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "VehiculosGetByTipo", Tipo).Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Vehiculos NewEnt = new Vehiculos();
                        NewEnt = CargarVehiculos(dr);
                        lstVehiculos.Add(NewEnt);
                    }
                }
                return lstVehiculos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion
    }
}

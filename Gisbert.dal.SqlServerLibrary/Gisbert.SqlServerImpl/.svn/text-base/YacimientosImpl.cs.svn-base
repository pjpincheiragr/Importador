
///////////////////////////////////////////////////////////////////////////
//
// Generated by MyGeneration Version # (1.3.0.9) 
// 
// Template Creado por:
//
// eXimo - Consultora en Sistemas
//
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Eximo.dal.SqlServerLibrary;
using Rodial.Model;

namespace Rodial.SqlServerImpl
{
    public class YacimientosImpl
    {
        #region Yacimientos methods

        public int YacimientosAdd(Yacimientos yacimientos)
        {
            try
            {
                int idYacimientos = (int)SqlHelper.ExecuteScalar(SqlImplHelper.getConnectionString(), "YacimientosAdd",
                                                        yacimientos.Abreviatura,
                                                        yacimientos.Descripcion,
                                                        yacimientos.IdArea,
                                                        yacimientos.Baja);

                AUD_LOGImpl.InsertarLog("Yacimientos", idYacimientos, "INSERT");

                return idYacimientos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool YacimientosUpdate(Yacimientos yacimientos)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "YacimientosUpdate",
                                                        yacimientos.IdYacimiento,
                                                        yacimientos.Abreviatura,
                                                        yacimientos.Descripcion,
                                                        yacimientos.IdArea,
                                                        yacimientos.Baja);

                AUD_LOGImpl.InsertarLog("Yacimientos", yacimientos.IdYacimiento, yacimientos.Baja ? "UpDEL" : "UPDATE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool YacimientosDelete(int IdYacimiento)
        {
            try
            {
                int update = SqlHelper.ExecuteNonQuery(SqlImplHelper.getConnectionString(), "YacimientosDelete",
                                                        IdYacimiento);

                AUD_LOGImpl.InsertarLog("Yacimientos", IdYacimiento, "DELETE");

                if (update > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Yacimientos YacimientosGetById(int IdYacimiento)
        {
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "YacimientosGetById",
                                                        IdYacimiento).Tables[0];
                Yacimientos NewEnt = new Yacimientos();

                if (dt.Rows.Count > 0)
                {
                    DataRow dr = dt.Rows[0];
                    NewEnt = CargarYacimientos(dr);
                }
                return NewEnt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Yacimientos> YacimientosGetAll()
        {
            List<Yacimientos> lstYacimientos = new List<Yacimientos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "YacimientosGetAll").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Yacimientos NewEnt = new Yacimientos();
                        NewEnt = CargarYacimientos(dr);
                        lstYacimientos.Add(NewEnt);
                    }
                }
                return lstYacimientos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Yacimientos> YacimientoByArea(int idArea)
        {
            List<Yacimientos> lstYacimientos = new List<Yacimientos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "YacimientoByArea", idArea).Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Yacimientos NewEnt = new Yacimientos();
                        NewEnt = CargarYacimientos(dr);
                        lstYacimientos.Add(NewEnt);
                    }
                }
                return lstYacimientos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public List<Yacimientos> YacimientosGetBy()
        {
            List<Yacimientos> lstYacimientos = new List<Yacimientos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "YacimientosGetAll").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        DataRow dr = dt.Rows[i];
                        Yacimientos NewEnt = new Yacimientos();
                        NewEnt = CargarYacimientos(dr);
                        lstYacimientos.Add(NewEnt);
                    }
                }
                return lstYacimientos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        private Yacimientos CargarYacimientos(DataRow dr)
        {
            try
            {
                Yacimientos oObjeto = new Yacimientos();

                oObjeto.IdYacimiento = Int32.Parse(dr["IdYacimiento"].ToString());
                oObjeto.Abreviatura = dr["Abreviatura"].ToString();
                oObjeto.Descripcion = dr["Descripcion"].ToString();
                oObjeto.IdArea = Int32.Parse(dr["IdArea"].ToString());
                oObjeto.Baja = Boolean.Parse(dr["Baja"].ToString());

                return oObjeto;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Yacimientos> YacimientosGetAllBaja()
        {
            List<Yacimientos> lstYacimientos = new List<Yacimientos>();
            try
            {
                DataTable dt = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "YacimientosGetAllBaja").Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; dt.Rows.Count > i; i++)
                    {
                        Yacimientos NewEnt = new Yacimientos();
                        NewEnt = CargarYacimientos(dt.Rows[i]);
                        lstYacimientos.Add(NewEnt);
                    }
                }
                return lstYacimientos;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public DataTable YacimientosGetAllCustomize()
        {
            try
            {
                DataTable DTYacimientos;
                DataSet DSYacimientos = SqlHelper.ExecuteDataset(SqlImplHelper.getConnectionString(), "YacimientosGetAllCustomize");
                DTYacimientos = DSYacimientos.Tables[0];
                DSYacimientos.Tables.RemoveAt(0);
                return DTYacimientos;
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

    }
}
